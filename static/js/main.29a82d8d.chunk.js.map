{"version":3,"sources":["images/background.jpg","components/QuestionCard/style.ts","services/API.ts","components/QuestionCard/index.tsx","utils/index.ts","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","ButtonWrapper","styled","div","correct","userClicked","Wrapper","QuestionCard","question","answers","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","key","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29a82d8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.4b11add2.jpg\";","import styled from 'styled-components';\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    width: 100%;\r\n    margin-bottom: 12px;\r\n    cursor: pointer;\r\n    background: ${({ correct, userClicked }) =>\r\n    correct\r\n      ? '#59bc86'\r\n      : (!correct && userClicked)\r\n        ? '#c15868'\r\n        : '#FE8168'\r\n  };\r\n    color: white;\r\n    border: 0;\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    font-size: 15px;\r\n  }\r\n\r\n  button:disabled {\r\n    color: #F3F3F3;\r\n    cursor: default;\r\n  }\r\n`;\r\n\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  background-color: white;\r\n  text-align: center;\r\n  box-shadow: 2px 2px 5px #000;\r\n\r\n  p {\r\n    font-size: 20px;\r\n    margin-top: 0;\r\n  }\r\n\r\n`;\r\n","import { shuffleArray } from '../utils'\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => (\r\n    {\r\n      ...question,\r\n      answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n    }\r\n  ))\r\n};","import React from 'react';\r\nimport { AnswerObject } from '../../App';\r\nimport { Wrapper, ButtonWrapper } from './style'\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNumber: number;\r\n  totalQuestions: number;\r\n\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNumber,\r\n  totalQuestions,\r\n}) => (\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: {questionNumber} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n      <div>\r\n        {answers.map(answer => (\r\n          <ButtonWrapper\r\n            key={answer}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n          >\r\n            <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n\r\nexport default QuestionCard;","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/background.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: 'Catamaran', sans-serif;\r\n  }\r\n`;\r\n\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nalign-items: center;\r\n\r\n  > p {\r\n  color: #fff;\r\n}\r\n\r\n  .score {\r\n  color: #fff;\r\n  font-size: 2rem;\r\n  margin: 0;\r\n}\r\n\r\nh1 {\r\n  font-family: 'Sansita Swashed';\r\n  color: whitesmoke;\r\n  line-height: 150px;\r\n  font-size: 100px;\r\n  text-align: center;\r\n  margin: 20px;\r\n  text-shadow: 5px 5px 2px #000;\r\n}\r\n\r\n  .start, .next {\r\n  cursor: pointer;\r\n  background: linear-gradient(180deg, #fff, #fff);\r\n  border: 0;\r\n  box-shadow: 3px 3px 2px #000;\r\n  border-radius: 10px;\r\n  height: 40px;\r\n  margin: 20px 0;\r\n  padding: 0 40px;\r\n  font-size: 20px;\r\n}\r\n\r\n   .start {\r\n  max-width: 200px;\r\n}\r\n\r\n`;","import React, { useState } from 'react';\nimport QuestionCard from './components/QuestionCard';\nimport { fetchQuizQuestions, Difficulty, QuestionState } from './services/API';\n\nimport { GlobalStyle, Wrapper, } from './App.styles'\n\nexport type AnswerObject = {\n  question: string,\n  answer: string,\n  correct: boolean;\n  correctAnswer: string;\n}\n\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const handleAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n\n      correct && setScore(prev => prev + 1);\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n\n    (nextQuestion === TOTAL_QUESTIONS) ?\n      setGameOver(true)\n      :\n      setNumber(nextQuestion);\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1> React Quiz </h1>\n\n        {(gameOver || userAnswers.length === TOTAL_QUESTIONS) &&\n          <button className=\"start\" onClick={startTrivia}> Start </button>}\n\n        {!gameOver && <p className=\"score\">Score: {score} </p>}\n\n        {loading && <p>\"Loading Questions ...\"</p>}\n\n        {(!loading && !gameOver) &&\n          <QuestionCard\n            questionNumber={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={handleAnswer}\n          />}\n\n        {!gameOver && !loading && userAnswers.length > number && number < TOTAL_QUESTIONS - 1 &&\n          <button className=\"next\" onClick={nextQuestion}>Next Question</button>}\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// API: https://opentdb.com/api.php?amount=10&type=multiple"],"sourceRoot":""}